# This workflow will be triggered on every merge to the prod, int, and dev branches 

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# Validation only runs if an AsyncAPI spec file is present in the commit

# To get started, configure the following in your repos secrets https://docs.github.com/en/actions/security-guides/encrypted-secrets
# SOLACE_CLOUD_TOKEN
# TF_BACKEND_S3_BUCKET_KEY
# AWS_ACCESS_KEY_ID
# AWS_SECRET_ACCESS_KEY
# TF_VAR_cloud_api_key
# TF_VAR_cloud_api_secret
# TF_VAR_kafka_api_key
# TF_VAR_kafka_api_secret
# TF_VAR_kafka_rest_endpoint
# TF_VAR_kafka_id

name: Provision the confluent cluster
on:
  push: 
    branches: [ prod ]

env:
  SOLACE_CLOUD_TOKEN: ${{ secrets.SOLACE_CLOUD_TOKEN }}
  TF_BACKEND_S3_BUCKET_KEY: ${{ secrets.TF_BACKEND_S3_BUCKET_KEY }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  TF_VAR_cloud_api_key: ${{ secrets.TF_VAR_cloud_api_key }}
  TF_VAR_cloud_api_secret: ${{ secrets.TF_VAR_cloud_api_secret }}
  TF_VAR_kafka_api_key: ${{ secrets.TF_VAR_kafka_api_key }}
  TF_VAR_kafka_api_secret: ${{ secrets.TF_VAR_kafka_api_secret }}
  TF_VAR_kafka_rest_endpoint: ${{ secrets.TF_VAR_kafka_rest_endpoint }}
  TF_VAR_kafka_id: ${{ secrets.TF_VAR_kafka_id }}

jobs:

  promote:
    runs-on: ubuntu-latest
    steps:
      - name: Setup node
        uses: actions/setup-node@v3
        with: 
          node-version: '16'
          
      - name: Checkout Current Branch
        uses: actions/checkout@master
        with:
          ref: ${{ github.ref }}
          fetch-depth: 2

      # Get all files in commit
      - id: changed-files
        uses: tj-actions/changed-files@v11.2
        with:
            separator: ","
    
      - name: List all modified files
        run: |
          IFS=$',' read -a MODIFIED_FILES_ARRAY <<< "${{ steps.changed-files.outputs.modified_files }}"
          for file in "${MODIFIED_FILES_ARRAY[@]}"
              do
                echo "changed file: $file"
                if [[ ( ${file} == *.yaml ) || ( ${file} == *.yml )]]
                then
                  APPLICATION_VERSION_IDS=$(awk '/x-ep-application-version-id: \"/,/\"/'  "${file}" | cut -d'"' -f 2)
                  echo $APPLICATION_VERSION_IDS
                fi
                if [[ ( ${file} == *.json )]]
                then
                  APPLICATION_VERSION_IDS=$(awk '/\"x-ep-application-version-id\": \"/,/\"/'  "${file}" | cut -d'"' -f 4)
                  echo ${APPLICATION_VERSION_IDS}
                fi
              done
            unset IFS
            if [ -z $APPLICATION_VERSION_IDS ]; then
              echo "Cancel workflow. No applicaitn IDs found to promote!"
              echo "Make sure the x-ep-application-version-id extension is defined in the asyncapi spec file in the info block"
              echo "CANCEL_WORKFLOW=true" >> $GITHUB_ENV
            else
              echo "APPLICATION_VERSION_IDS not empty"
              echo "APPLICATION_VERSION_IDS=$APPLICATION_VERSION_IDS" >> $GITHUB_ENV
            fi
        shell:
          bash

      - name: Cancel Workflow if no asyncAPI file present in PR
        if: env.CANCEL_WORKFLOW == 'true'
        uses: andymckay/cancel-action@0.3

      - name: Checkout terraform configuration repo
        uses: actions/checkout@v2
        with:
          repository: TamimiGitHub/solace-terraform-provisioning
      
      - name: Install dependencies
        run: npm install
      
      - name: Promote applicaiton
        run: npm run promote -- -av ${{ env.APPLICATION_VERSION_IDS }} -mes PROD-Kafka

  provision:
      needs: promote 
      runs-on: ubuntu-latest
      steps:
        - name: Checkout Current Branch
          uses: actions/checkout@master
          with:
            ref: ${{ github.ref }}
          
        - name: Checkout terraform configuration repo
          uses: actions/checkout@v2
          with:
            repository: TamimiGitHub/solace-terraform-provisioning
        
        - name: Install dependencies
          run: npm install

        - name: run provision commands
          run: |
            touch env-config-confluent.list
            echo "TF_MODULE=confluent-topics" >> env-config-confluent.list
            echo "TF_BACKEND_S3_BUCKET=tf-test-confluent-topics" >> env-config-confluent.list
            echo "TF_BACKEND_S3_BUCKET_KEY=$TF_BACKEND_S3_BUCKET_KEY" >> env-config-confluent.list
            echo "TF_BACKEND_DYNAMODB_LOCK_TABLE=tf-test-confluent-topics-locks" >> env-config-confluent.list
            echo "AWS_REGION=us-east-2" >> env-config-confluent.list
            echo "AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID" >> env-config-confluent.list
            echo "AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY" >> env-config-confluent.list
            echo "TF_VAR_cloud_api_key=$TF_VAR_cloud_api_key" >> env-config-confluent.list
            echo "TF_VAR_cloud_api_secret=$TF_VAR_cloud_api_secret" >> env-config-confluent.list
            echo "TF_VAR_kafka_api_key=$TF_VAR_kafka_api_key" >> env-config-confluent.list
            echo "TF_VAR_kafka_api_secret=$TF_VAR_kafka_api_secret" >> env-config-confluent.list
            echo "TF_VAR_kafka_rest_endpoint=$TF_VAR_kafka_rest_endpoint" >> env-config-confluent.list
            echo "TF_VAR_kafka_id=$TF_VAR_kafka_id" >> env-config-confluent.list

            SOLACE_MESSAGING_SERVICE="PROD-Kafka" npm run provision
