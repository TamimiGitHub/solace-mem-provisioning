# This workflow will be triggered on every pull request to the prod

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.


# To get started, configure the following in your repos secrets https://docs.github.com/en/actions/security-guides/encrypted-secrets
# SOLACE_CLOUD_TOKEN
## The following confluend cloud keys should have a global access type
# TF_VAR_confluent_cloud_api_key
# TF_VAR_confluent_cloud_api_secret
# AWS_ACCESS_KEY_ID
# AWS_SECRET_ACCESS_KEY
# WORKFLOW_PAT: Personal Access Token token for the destination repo for authentication. See more here https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token
## Note: The PAT should have workflow access enabled

# Important: Update the SOLACE_MESSAGING_SERVICE environment variable to the environment name on Solace Pubsub+ Event Portal to associate a branch to an environment

name: Terraform Plan
on:
  pull_request: 
    branches: [ prod ]

env:
  SOLACE_MESSAGING_SERVICE: PROD-Kafka
  SOLACE_CLOUD_TOKEN: ${{ secrets.SOLACE_CLOUD_TOKEN }}
  TF_VAR_confluent_cloud_api_key: ${{ secrets.TF_VAR_confluent_cloud_api_key }}
  TF_VAR_confluent_cloud_api_secret: ${{ secrets.TF_VAR_confluent_cloud_api_secret }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

jobs:
  terraform-plan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7
     
      # Get all files in commit
      - id: changed-files
        uses: tj-actions/changed-files@v11.2
        with:
            separator: ","
    
      - name: List all modified files
        run: |
          IFS=$',' read -a MODIFIED_FILES_ARRAY <<< "${{ steps.changed-files.outputs.modified_files }}"
          asyncapiFiles=()
          for file in "${MODIFIED_FILES_ARRAY[@]}"
              do
                echo "changed file: $file"
                if [[ ( ${file} == *.yaml ) || ( ${file} == *.yml ) ||  ${file} == *.yaml )]]
                then
                  asyncapiFiles+=("$file")
                  echo "ASYNCAPI_FILE_PATH=${file}" >> $GITHUB_ENV
                fi
              done
            unset IFS
            if [ ${#asyncapiFiles[@]} -eq 0 ]; then
              echo "Cancel workflow. No asyncapi spec file found to promote!"
              echo "CANCEL_WORKFLOW=true" >> $GITHUB_ENV
        shell:
          bash

      - name: Cancel Workflow if no asyncAPI file present in PR
        if: env.CANCEL_WORKFLOW == 'true'
        uses: andymckay/cancel-action@0.3
        with:
          token: ${{ secrets.WORKFLOW_PAT }}
    
      # Spec file found in commit
      - name: Checkout terraform configuration repo
        uses: actions/checkout@v2
        with:
          repository: TamimiGitHub/solace-terraform-provisioning
      
      - name: Install dependencies
        run: npm install

      - name: Promote application 
        run: npm run promote -- -f $ASYNCAPI_FILE_PATH -mes $SOLACE_MESSAGING_SERVICE

      - name: Terraform plan
        id: plan
        run: SOLACE_MESSAGING_SERVICE=$SOLACE_MESSAGING_SERVICE npm run plan

      - name: Demote application 
        run: npm run promote -- -f $ASYNCAPI_FILE_PATH -mes $SOLACE_MESSAGING_SERVICE -d

      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
            })

            // 2. Prepare format of the comment
            const output = `#### Terraform Plan ðŸ“–\`${{ steps.plan.outcome }}\`
      
            <details><summary>Show Plan</summary>
      
            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`
      
            </details>
      
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\` *`;
      
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })